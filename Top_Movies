{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jordanho1006/python-projects/blob/main/Top_Movies\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D49vJ882-Ts7"
      },
      "outputs": [],
      "source": [
        "#import the necessary libraries\n",
        "import requests\n",
        "import json\n",
        "import pandas as pd\n",
        "from bs4 import BeautifulSoup"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PMbajQcC-VnU"
      },
      "outputs": [],
      "source": [
        "#making a request to the URL\n",
        "URL = \"https://www.imdb.com/chart/moviemeter/?sort=rk,asc&mode=simple&page=1\"\n",
        "page = requests.get(URL)\n",
        "\n",
        "#importing the raw html into beautiful soup\n",
        "soup = BeautifulSoup(page.content, 'html.parser')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F_WsbfXl-W1l"
      },
      "outputs": [],
      "source": [
        "#scraping and processing the raw movie information into movie titles and release years\n",
        "raw_movies = soup.findAll('td', class_='titleColumn')\n",
        "\n",
        "movie_titles = []\n",
        "movie_releaseyears = []\n",
        "for raw_movie in raw_movies:\n",
        "  movie_titles.append(raw_movie.get_text().strip().split('\\n')[0])\n",
        "  movie_releaseyears.append(int(raw_movie.get_text().strip().split('\\n')[1].replace('(','').replace(')','')))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a dictionary and turning it into a dataframe\n",
        "movie_data = {'Title' : movie_titles,\n",
        "         'Release Year' : movie_releaseyears}\n",
        "movie_data = pd.DataFrame(movie_data)\n",
        "movie_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "RdT5jBocR_7O",
        "outputId": "6cad9bb3-8d12-4077-a4ae-73f69ac07c0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                Title  Release Year\n",
              "0                          The Batman          2022\n",
              "1                        The Northman          2022\n",
              "2                  365 Days: This Day          2022\n",
              "3                           Uncharted          2022\n",
              "4   Everything Everywhere All at Once          2022\n",
              "..                                ...           ...\n",
              "95       Zack Snyder's Justice League          2021\n",
              "96           The Matrix Resurrections          2021\n",
              "97                Operation Mincemeat          2021\n",
              "98                              Joker          2019\n",
              "99                      London Fields          2018\n",
              "\n",
              "[100 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc313752-f715-4511-b520-33fc07d2d03e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Release Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The Batman</td>\n",
              "      <td>2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>The Northman</td>\n",
              "      <td>2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>365 Days: This Day</td>\n",
              "      <td>2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Uncharted</td>\n",
              "      <td>2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Everything Everywhere All at Once</td>\n",
              "      <td>2022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>Zack Snyder's Justice League</td>\n",
              "      <td>2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>The Matrix Resurrections</td>\n",
              "      <td>2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Operation Mincemeat</td>\n",
              "      <td>2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Joker</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>London Fields</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc313752-f715-4511-b520-33fc07d2d03e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bc313752-f715-4511-b520-33fc07d2d03e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bc313752-f715-4511-b520-33fc07d2d03e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#API Key\n",
        "api_key = '21c8b507'\n",
        "\n",
        "def API_requests(movie_titles,movie_releaseyears,api_key):\n",
        "  #creating declarations for common movie data\n",
        "  movie_dtitles = []\n",
        "  movie_dreleaseyears = []\n",
        "  movie_ddirectors = []\n",
        "  movie_ratings = []\n",
        "  movie_releasedates = []\n",
        "  movie_runtimes = []\n",
        "  movie_genres = []\n",
        "  movie_summarys = []\n",
        "  #declarations for the various movie rating systems\n",
        "  movie_metacritic = []\n",
        "  movie_rottentomatoes = []\n",
        "  movie_imdb = []\n",
        "\n",
        "  for movie_title, movie_releaseyear in zip(movie_titles, movie_releaseyears):\n",
        "    url = f'https://www.omdbapi.com/?t={movie_title}&y={movie_releaseyear}&plot=full&apikey={api_key}'\n",
        "    response = requests.get(url)\n",
        "\n",
        "    #if the request is successful then extract the data from the json code that is returned\n",
        "    if(response.status_code == 200):\n",
        "      data = response.json()\n",
        "      \n",
        "      #ensuring that is data to retrieve before scraping, if not leave the data blank\n",
        "      if data['Response'] == 'True':\n",
        "        movie_dtitles.append(data['Title'])\n",
        "        movie_dreleaseyears.append(int(data['Year']))\n",
        "        movie_ratings.append(data['Rated'])\n",
        "        movie_releasedates.append(data['Released'])\n",
        "        movie_genres.append(data['Genre'])\n",
        "        movie_ddirectors.append(data['Director'])\n",
        "        movie_summarys.append(data['Plot'])\n",
        "        movie_runtimes.append(data['Runtime'])\n",
        "\n",
        "        #ensuring that the appended rating data is either a int or float so that it can be analyzed and turned into descriptive statistics\n",
        "        if data['Metascore'] != 'N/A':\n",
        "          movie_metacritic.append(int(data['Metascore']))\n",
        "        else:\n",
        "          movie_metacritic.append((data['Metascore']))\n",
        "        if data['imdbRating'] != 'N/A':\n",
        "          movie_imdb.append(float(data['imdbRating']))\n",
        "        else:\n",
        "          movie_imdb.append((data['imdbRating']))\n",
        "\n",
        "        #ensuring that there is rating data to index\n",
        "        if len(data['Ratings']) == 3:\n",
        "          movie_rottentomatoes.append(int(data['Ratings'][1]['Value'].strip('%')))\n",
        "        else:\n",
        "          movie_rottentomatoes.append('N/A')\n",
        "\n",
        "      else:\n",
        "        movie_dtitles.append('')\n",
        "        movie_dreleaseyears.append('')\n",
        "        movie_ratings.append('')\n",
        "        movie_releasedates.append('')\n",
        "        movie_runtimes.append('N/A')\n",
        "        movie_genres.append('')\n",
        "        movie_ddirectors.append('')\n",
        "        movie_summarys.append('')\n",
        "        movie_metacritic.append('N/A')\n",
        "        movie_rottentomatoes.append('N/A')\n",
        "        movie_imdb.append('N/A')\n",
        "\n",
        "  #calculating the average rating data for rotten tomatoes\n",
        "  sum_ratingrt = 0\n",
        "  num_ratingrt = 0\n",
        "  for ratingrt in movie_rottentomatoes:\n",
        "    if ratingrt != 'N/A':\n",
        "      sum_ratingrt += ratingrt\n",
        "      num_ratingrt += 1\n",
        "  average_ratingrt = sum_ratingrt/num_ratingrt\n",
        "\n",
        "  #calculating the average rating data for metacritic\n",
        "  sum_ratingmc = 0\n",
        "  num_ratingmc = 0\n",
        "  for ratingmc in movie_metacritic:\n",
        "    if ratingmc != 'N/A':\n",
        "      sum_ratingmc += ratingmc\n",
        "      num_ratingmc += 1\n",
        "  average_ratingmc = sum_ratingmc/num_ratingmc\n",
        "\n",
        "  #calculating the average rating data for imdb\n",
        "  sum_ratingimdb = 0\n",
        "  num_ratingimdb = 0\n",
        "  for ratingimdb in movie_imdb:\n",
        "    if ratingimdb != 'N/A':\n",
        "      sum_ratingimdb += ratingimdb\n",
        "      num_ratingimdb += 1\n",
        "  average_ratingimdb = sum_ratingimdb/num_ratingimdb\n",
        "\n",
        "  #replacing the missing rating data with the average of the existing ratings\n",
        "  for x in range(0, len(movie_rottentomatoes)):\n",
        "    if movie_rottentomatoes[x] == 'N/A':\n",
        "      movie_rottentomatoes[x] = average_ratingrt\n",
        "    if movie_metacritic[x] == 'N/A':\n",
        "      movie_metacritic[x] = average_ratingmc\n",
        "    if movie_imdb[x] == 'N/A':\n",
        "      movie_imdb[x] = average_ratingimdb\n",
        "\n",
        "\n",
        "  #creating and return the data as a dataframe\n",
        "  df = pd.DataFrame()\n",
        "  df['Title'] = movie_dtitles\n",
        "  df['Release Year'] = movie_dreleaseyears\n",
        "  df['Rated'] = movie_ratings\n",
        "  df['Released'] = movie_releasedates\n",
        "  df['Runtime'] = movie_runtimes\n",
        "  df['Genres'] = movie_genres\n",
        "  df['Directors'] = movie_ddirectors\n",
        "  df['Summary'] = movie_summarys\n",
        "  df['Rotten Tomatoes'] = movie_rottentomatoes\n",
        "  df['Metacritic'] = movie_metacritic\n",
        "  df['IMDb'] = movie_imdb\n",
        "  return df"
      ],
      "metadata": {
        "id": "fgnGxhFnHdfw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "movie_info = API_requests(movie_titles,movie_releaseyears,api_key)\n",
        "movie_info"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Ygl88aHoMJv5",
        "outputId": "b8c66226-a71e-42fe-948a-2d2631ab04ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                Title Release Year  Rated     Released  \\\n",
              "0                          The Batman         2022  PG-13  04 Mar 2022   \n",
              "1                        The Northman         2022      R  22 Apr 2022   \n",
              "2                                                                        \n",
              "3                           Uncharted         2022  PG-13  18 Feb 2022   \n",
              "4   Everything Everywhere All at Once         2022      R  25 Mar 2022   \n",
              "..                                ...          ...    ...          ...   \n",
              "95       Zack Snyder's Justice League         2021      R  18 Mar 2021   \n",
              "96           The Matrix Resurrections         2021      R  22 Dec 2021   \n",
              "97                Operation Mincemeat         2021  PG-13  11 May 2022   \n",
              "98                              Joker         2019      R  04 Oct 2019   \n",
              "99                      London Fields         2018      R  26 Oct 2018   \n",
              "\n",
              "    Runtime                      Genres                   Directors  \\\n",
              "0   176 min        Action, Crime, Drama                 Matt Reeves   \n",
              "1   136 min    Action, Adventure, Drama               Robert Eggers   \n",
              "2       N/A                                                           \n",
              "3   116 min           Action, Adventure             Ruben Fleischer   \n",
              "4   139 min   Action, Adventure, Comedy  Dan Kwan, Daniel Scheinert   \n",
              "..      ...                         ...                         ...   \n",
              "95  242 min  Action, Adventure, Fantasy                 Zack Snyder   \n",
              "96  148 min              Action, Sci-Fi              Lana Wachowski   \n",
              "97  128 min                  Drama, War                 John Madden   \n",
              "98  122 min      Crime, Drama, Thriller               Todd Phillips   \n",
              "99  118 min    Crime, Mystery, Thriller               Mathew Cullen   \n",
              "\n",
              "                                              Summary  Rotten Tomatoes  \\\n",
              "0   When the Riddler, a sadistic serial killer, be...        85.000000   \n",
              "1   From visionary director Robert Eggers comes Th...        89.000000   \n",
              "2                                                            69.454545   \n",
              "3   Street-smart Nathan Drake (Tom Holland) is rec...        69.454545   \n",
              "4   An aging Chinese immigrant is swept up in an i...        97.000000   \n",
              "..                                                ...              ...   \n",
              "95  Determined to ensure Superman's ultimate sacri...        69.454545   \n",
              "96  Return to a world of two realities: one, every...        63.000000   \n",
              "97  In the context of WW2 narratives, the story of...        69.454545   \n",
              "98  Arthur Fleck works as a clown and is an aspiri...        68.000000   \n",
              "99  An American writer arrives in London where he ...         0.000000   \n",
              "\n",
              "    Metacritic     IMDb  \n",
              "0    72.000000  8.30000  \n",
              "1    82.000000  7.90000  \n",
              "2    62.026667  6.98961  \n",
              "3    45.000000  6.60000  \n",
              "4    82.000000  9.00000  \n",
              "..         ...      ...  \n",
              "95   54.000000  8.10000  \n",
              "96   63.000000  5.70000  \n",
              "97   59.000000  6.90000  \n",
              "98   59.000000  8.40000  \n",
              "99   16.000000  4.00000  \n",
              "\n",
              "[100 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5af1029c-a1c1-4db0-a343-ea21727c9e6f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Rated</th>\n",
              "      <th>Released</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Genres</th>\n",
              "      <th>Directors</th>\n",
              "      <th>Summary</th>\n",
              "      <th>Rotten Tomatoes</th>\n",
              "      <th>Metacritic</th>\n",
              "      <th>IMDb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The Batman</td>\n",
              "      <td>2022</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>04 Mar 2022</td>\n",
              "      <td>176 min</td>\n",
              "      <td>Action, Crime, Drama</td>\n",
              "      <td>Matt Reeves</td>\n",
              "      <td>When the Riddler, a sadistic serial killer, be...</td>\n",
              "      <td>85.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>8.30000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>The Northman</td>\n",
              "      <td>2022</td>\n",
              "      <td>R</td>\n",
              "      <td>22 Apr 2022</td>\n",
              "      <td>136 min</td>\n",
              "      <td>Action, Adventure, Drama</td>\n",
              "      <td>Robert Eggers</td>\n",
              "      <td>From visionary director Robert Eggers comes Th...</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>7.90000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>N/A</td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td></td>\n",
              "      <td>69.454545</td>\n",
              "      <td>62.026667</td>\n",
              "      <td>6.98961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Uncharted</td>\n",
              "      <td>2022</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>18 Feb 2022</td>\n",
              "      <td>116 min</td>\n",
              "      <td>Action, Adventure</td>\n",
              "      <td>Ruben Fleischer</td>\n",
              "      <td>Street-smart Nathan Drake (Tom Holland) is rec...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>45.000000</td>\n",
              "      <td>6.60000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Everything Everywhere All at Once</td>\n",
              "      <td>2022</td>\n",
              "      <td>R</td>\n",
              "      <td>25 Mar 2022</td>\n",
              "      <td>139 min</td>\n",
              "      <td>Action, Adventure, Comedy</td>\n",
              "      <td>Dan Kwan, Daniel Scheinert</td>\n",
              "      <td>An aging Chinese immigrant is swept up in an i...</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>9.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>Zack Snyder's Justice League</td>\n",
              "      <td>2021</td>\n",
              "      <td>R</td>\n",
              "      <td>18 Mar 2021</td>\n",
              "      <td>242 min</td>\n",
              "      <td>Action, Adventure, Fantasy</td>\n",
              "      <td>Zack Snyder</td>\n",
              "      <td>Determined to ensure Superman's ultimate sacri...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>8.10000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>The Matrix Resurrections</td>\n",
              "      <td>2021</td>\n",
              "      <td>R</td>\n",
              "      <td>22 Dec 2021</td>\n",
              "      <td>148 min</td>\n",
              "      <td>Action, Sci-Fi</td>\n",
              "      <td>Lana Wachowski</td>\n",
              "      <td>Return to a world of two realities: one, every...</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>5.70000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Operation Mincemeat</td>\n",
              "      <td>2021</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>11 May 2022</td>\n",
              "      <td>128 min</td>\n",
              "      <td>Drama, War</td>\n",
              "      <td>John Madden</td>\n",
              "      <td>In the context of WW2 narratives, the story of...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>6.90000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Joker</td>\n",
              "      <td>2019</td>\n",
              "      <td>R</td>\n",
              "      <td>04 Oct 2019</td>\n",
              "      <td>122 min</td>\n",
              "      <td>Crime, Drama, Thriller</td>\n",
              "      <td>Todd Phillips</td>\n",
              "      <td>Arthur Fleck works as a clown and is an aspiri...</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>8.40000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>London Fields</td>\n",
              "      <td>2018</td>\n",
              "      <td>R</td>\n",
              "      <td>26 Oct 2018</td>\n",
              "      <td>118 min</td>\n",
              "      <td>Crime, Mystery, Thriller</td>\n",
              "      <td>Mathew Cullen</td>\n",
              "      <td>An American writer arrives in London where he ...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>4.00000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows Ã— 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5af1029c-a1c1-4db0-a343-ea21727c9e6f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5af1029c-a1c1-4db0-a343-ea21727c9e6f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5af1029c-a1c1-4db0-a343-ea21727c9e6f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#merging the two dataframes into one and creating a csv file with it\n",
        "top_movies_df = pd.merge(movie_data, movie_info, how='left', on=['Title','Release Year']).drop(['Release Year'], axis=1)\n",
        "top_movies_df.to_csv('top_movies_df.csv',index=False)\n",
        "top_movies_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "aW2RtiPOefqN",
        "outputId": "bd7b6b18-00f0-461e-cfeb-d2f30abc603c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                Title  Rated     Released  Runtime  \\\n",
              "0                          The Batman  PG-13  04 Mar 2022  176 min   \n",
              "1                        The Northman      R  22 Apr 2022  136 min   \n",
              "2                  365 Days: This Day    NaN          NaN      NaN   \n",
              "3                           Uncharted  PG-13  18 Feb 2022  116 min   \n",
              "4   Everything Everywhere All at Once      R  25 Mar 2022  139 min   \n",
              "..                                ...    ...          ...      ...   \n",
              "95       Zack Snyder's Justice League      R  18 Mar 2021  242 min   \n",
              "96           The Matrix Resurrections      R  22 Dec 2021  148 min   \n",
              "97                Operation Mincemeat  PG-13  11 May 2022  128 min   \n",
              "98                              Joker      R  04 Oct 2019  122 min   \n",
              "99                      London Fields      R  26 Oct 2018  118 min   \n",
              "\n",
              "                        Genres                   Directors  \\\n",
              "0         Action, Crime, Drama                 Matt Reeves   \n",
              "1     Action, Adventure, Drama               Robert Eggers   \n",
              "2                          NaN                         NaN   \n",
              "3            Action, Adventure             Ruben Fleischer   \n",
              "4    Action, Adventure, Comedy  Dan Kwan, Daniel Scheinert   \n",
              "..                         ...                         ...   \n",
              "95  Action, Adventure, Fantasy                 Zack Snyder   \n",
              "96              Action, Sci-Fi              Lana Wachowski   \n",
              "97                  Drama, War                 John Madden   \n",
              "98      Crime, Drama, Thriller               Todd Phillips   \n",
              "99    Crime, Mystery, Thriller               Mathew Cullen   \n",
              "\n",
              "                                              Summary  Rotten Tomatoes  \\\n",
              "0   When the Riddler, a sadistic serial killer, be...        85.000000   \n",
              "1   From visionary director Robert Eggers comes Th...        89.000000   \n",
              "2                                                 NaN              NaN   \n",
              "3   Street-smart Nathan Drake (Tom Holland) is rec...        69.454545   \n",
              "4   An aging Chinese immigrant is swept up in an i...        97.000000   \n",
              "..                                                ...              ...   \n",
              "95  Determined to ensure Superman's ultimate sacri...        69.454545   \n",
              "96  Return to a world of two realities: one, every...        63.000000   \n",
              "97  In the context of WW2 narratives, the story of...        69.454545   \n",
              "98  Arthur Fleck works as a clown and is an aspiri...        68.000000   \n",
              "99  An American writer arrives in London where he ...         0.000000   \n",
              "\n",
              "    Metacritic  IMDb  \n",
              "0         72.0   8.3  \n",
              "1         82.0   7.9  \n",
              "2          NaN   NaN  \n",
              "3         45.0   6.6  \n",
              "4         82.0   9.0  \n",
              "..         ...   ...  \n",
              "95        54.0   8.1  \n",
              "96        63.0   5.7  \n",
              "97        59.0   6.9  \n",
              "98        59.0   8.4  \n",
              "99        16.0   4.0  \n",
              "\n",
              "[100 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-354594e0-99fb-4ab8-92c5-95fc4963aeed\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "      <th>Rated</th>\n",
              "      <th>Released</th>\n",
              "      <th>Runtime</th>\n",
              "      <th>Genres</th>\n",
              "      <th>Directors</th>\n",
              "      <th>Summary</th>\n",
              "      <th>Rotten Tomatoes</th>\n",
              "      <th>Metacritic</th>\n",
              "      <th>IMDb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>The Batman</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>04 Mar 2022</td>\n",
              "      <td>176 min</td>\n",
              "      <td>Action, Crime, Drama</td>\n",
              "      <td>Matt Reeves</td>\n",
              "      <td>When the Riddler, a sadistic serial killer, be...</td>\n",
              "      <td>85.000000</td>\n",
              "      <td>72.0</td>\n",
              "      <td>8.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>The Northman</td>\n",
              "      <td>R</td>\n",
              "      <td>22 Apr 2022</td>\n",
              "      <td>136 min</td>\n",
              "      <td>Action, Adventure, Drama</td>\n",
              "      <td>Robert Eggers</td>\n",
              "      <td>From visionary director Robert Eggers comes Th...</td>\n",
              "      <td>89.000000</td>\n",
              "      <td>82.0</td>\n",
              "      <td>7.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>365 Days: This Day</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Uncharted</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>18 Feb 2022</td>\n",
              "      <td>116 min</td>\n",
              "      <td>Action, Adventure</td>\n",
              "      <td>Ruben Fleischer</td>\n",
              "      <td>Street-smart Nathan Drake (Tom Holland) is rec...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>45.0</td>\n",
              "      <td>6.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Everything Everywhere All at Once</td>\n",
              "      <td>R</td>\n",
              "      <td>25 Mar 2022</td>\n",
              "      <td>139 min</td>\n",
              "      <td>Action, Adventure, Comedy</td>\n",
              "      <td>Dan Kwan, Daniel Scheinert</td>\n",
              "      <td>An aging Chinese immigrant is swept up in an i...</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>82.0</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>Zack Snyder's Justice League</td>\n",
              "      <td>R</td>\n",
              "      <td>18 Mar 2021</td>\n",
              "      <td>242 min</td>\n",
              "      <td>Action, Adventure, Fantasy</td>\n",
              "      <td>Zack Snyder</td>\n",
              "      <td>Determined to ensure Superman's ultimate sacri...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>54.0</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>The Matrix Resurrections</td>\n",
              "      <td>R</td>\n",
              "      <td>22 Dec 2021</td>\n",
              "      <td>148 min</td>\n",
              "      <td>Action, Sci-Fi</td>\n",
              "      <td>Lana Wachowski</td>\n",
              "      <td>Return to a world of two realities: one, every...</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>63.0</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Operation Mincemeat</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>11 May 2022</td>\n",
              "      <td>128 min</td>\n",
              "      <td>Drama, War</td>\n",
              "      <td>John Madden</td>\n",
              "      <td>In the context of WW2 narratives, the story of...</td>\n",
              "      <td>69.454545</td>\n",
              "      <td>59.0</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>Joker</td>\n",
              "      <td>R</td>\n",
              "      <td>04 Oct 2019</td>\n",
              "      <td>122 min</td>\n",
              "      <td>Crime, Drama, Thriller</td>\n",
              "      <td>Todd Phillips</td>\n",
              "      <td>Arthur Fleck works as a clown and is an aspiri...</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>59.0</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>London Fields</td>\n",
              "      <td>R</td>\n",
              "      <td>26 Oct 2018</td>\n",
              "      <td>118 min</td>\n",
              "      <td>Crime, Mystery, Thriller</td>\n",
              "      <td>Mathew Cullen</td>\n",
              "      <td>An American writer arrives in London where he ...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows Ã— 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-354594e0-99fb-4ab8-92c5-95fc4963aeed')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-354594e0-99fb-4ab8-92c5-95fc4963aeed button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-354594e0-99fb-4ab8-92c5-95fc4963aeed');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_movies_df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "VNCKUSRPnUc2",
        "outputId": "d25b878a-fd8b-44ff-e331-519d95cdcec4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Rotten Tomatoes  Metacritic       IMDb\n",
              "count        97.000000   97.000000  97.000000\n",
              "mean         69.454545   62.026667   6.989610\n",
              "std          18.966078   13.996259   1.053228\n",
              "min           0.000000   16.000000   3.400000\n",
              "25%          66.000000   53.000000   6.600000\n",
              "50%          69.454545   62.026667   6.989610\n",
              "75%          81.000000   71.000000   7.400000\n",
              "max         100.000000  100.000000   9.300000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-933076cb-28cb-463f-9f9f-4b281b283c34\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rotten Tomatoes</th>\n",
              "      <th>Metacritic</th>\n",
              "      <th>IMDb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>97.000000</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>97.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>69.454545</td>\n",
              "      <td>62.026667</td>\n",
              "      <td>6.989610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>18.966078</td>\n",
              "      <td>13.996259</td>\n",
              "      <td>1.053228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>3.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>66.000000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>6.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>69.454545</td>\n",
              "      <td>62.026667</td>\n",
              "      <td>6.989610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>81.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>7.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>9.300000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-933076cb-28cb-463f-9f9f-4b281b283c34')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-933076cb-28cb-463f-9f9f-4b281b283c34 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-933076cb-28cb-463f-9f9f-4b281b283c34');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "CIS 3120 - Homework 3",
      "provenance": [],
      "authorship_tag": "ABX9TyOHvkOFC7nxm/GITDRrDYkI",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}